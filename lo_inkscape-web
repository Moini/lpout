#!/usr/bin/env python

from lpout.client import Client
import sys
import jsonpickle
import os
import gitlab3

MODE = "export" # import, export or both
# doesn't help. jsonpickle, json -
# is there anything that can save AND load the bugs?
sys.setrecursionlimit(20000)

def export_bug(cls, name, data, parent=None):
    # pickle bugs, so we don't have to re-download them too often
    # and can examine the data
    # This fetches all open bugs which are publicly accessible (i.e. not private)
    filename = str(name).replace("/", "_lp-bug_") + ".txt"
    print "Writing " + filename
    with open(os.path.join(bug_dir, filename), "w") as bugfile:
        bugfile.write(jsonpickle.encode(data, unpicklable=False))

def gitlab_bug_import():

    # Login to the gitlab instance
    gitlab_instance = raw_input("Web address of gitlab instance (e.g. https://gitlab.com/): ")

    gl = gitlab3.GitLab(gitlab_instance)

    logged_in = False

    # don't kill the program for a typo
    while not logged_in:
        username = raw_input("User name or email address that is registered with the gitlab instance. All posts will be made in the name of this user: ")
        password = raw_input("Password for the user: ")

        if not gl.login(username, password):
            print "Login failed, please try again."
        else:
            logged_in = True

    # get list of bug files
    path_found = False

    # don't kill the program for a typo
    while not path_found:
        bug_dir = raw_input("Please indicate the directory where you have saved the pickled bug reports: ")
        if not os.path.exists(bug_dir):
            print "The directory %s does not exist." % bug_dir
        else:
            path_found = True

    # get a list of bug files
    bug_file_list = []
    for file in os.listdir(bug_dir):
        bug_file_list.append(os.path.join(bug_dir, file))

    for bug_file in bug_file_list:
        # read 1 bug from 1 bug_file
        try:
            with open(bug_file, "r") as object_file:
                object_string = object_file.read()
            bug_object = jsonpickle.decode(object_string)
        except Exception as e:
            print "Couldn't load bug object from file \"%s\". Error message: %s" % (bug_file, e)
            continue
        print bug_object["id"]

    # search for bug title on gitlab, to make sure it doesn't exist yet

    # add author name, lp bug id, 'imported from' to description (e.g. doctormo wrote: )
    # owner

    # add title, description, attachments, date_created
    # title, description, id, date_created
    # TODO: check if markdownification is required!
    #       do search and replace/use a library, depending on complexity
    # create issue

    # check for labels, create label, if needed, add labels
    # status._name, importance._name

    # add author name to comment
    # add comments (=notes) with contents, attachments, date_created

# Retrieve bug reports and save to disk
if MODE in ["export", "both"]:
    client = Client()
    project = client.project('inkscape-web')

    try:
        bug_dir = sys.argv[1]
        if os.path.isdir(bug_dir):
            print "Writing to " + bug_dir
        else:
            raise Exception
    except:
        bug_dir = "/tmp/bugs/"
        if not os.path.exists(bug_dir):
            os.mkdir(bug_dir)
        print "Writing to /tmp/bugs"

    Client.connect(Bug=export_bug)

    for bug in project.get_bugs():
        pass

# Import them to the gitlab instance
elif MODE in ["import", "both"]:
    gitlab_bug_import()

#
# Notes
#
# python-gitlab3: https://github.com/doctormo/python-gitlab3/blob/master/gitlab3/_api_definition.py
# optional parameters: https://docs.gitlab.com/ce/api/issues.html, https://docs.gitlab.com/ce/api/notes.html
